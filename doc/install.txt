Do whatever sections apply.

Git
  ## first, set up account on github (and get permissions from Abram)
  sudo apt-get install git
    git config --global user.name "xxx"
    git config --global user.email "xxx@gmail.com"
    git config --global credential.helper cache
    git config --global credential.helper 'cache --timeout=3600'
    git clone https://github.com/hivedev/newhive.git
    #git clone git@github.com:hivedev/newhive.git

Python library dependency dependencies (Ubuntu packages)
    sudo apt-get install python-pip python-dev node libxml2-dev libxslt-dev ipython

Python library dependencies
    sudo pip install werkzeug pymongo Pillow==2.9.0 boto oauth2 oauth2client webassets pytz pandas brownie jinja2 lxml Pillow python-gcm simplejson cssutils oauth2 apiclient httplib2 google-api-python-client paramiko hsaudiotag yappi

JavaScript dependencies
    sudo apt-get install npm

    node:
        wget http://nodejs.org/dist/v0.10.12/node-v0.10.12.tar.gz
        tar zxf node-v0.10.12.tar.gz
        cd node-v0.10.12
        chmod -R o+rX .
        make
        sudo make install
    cram:
        sudo npm install -g bower@0.9.2nm
        sudo npm install -g cram@0.7.6

Application dependencies (Ubuntu packages)
    sudo apt-get install mongodb ruby-sass ruby-compass libicu48 imagemagick

# Snapshot system
# TODO: replace with awesomium build

Get the db
    scp abram@admin-1.newhive.com:/mnt/scratch/backup/*.gz .
    tar -xvf *.gz
    mongorestore --drop -d test --noIndexRestore --dir tmp/live-newhive
deal with records that break indexing:
    mongo
    db.expr.remove({owner_name: "joebussiere"})
    db.expr.remove({$where: 'for(i in this.text_index){ if(this.text_index[i].length > 1000) return true } return false'})

Set up and run the server
    cd ~/newhive
    echo 'from local import *' > newhive/config/config.py 
    sudo sh -c 'echo 127.0.0.1 site content >> /etc/hosts'
    cd lib; ln -s ../libsrc/ .; cd ..
    ./server.py
    
Ok, far easier to clone the working instance, staging.
From AWS console, EC2 -> instances
Right-click staging -> create image
  Save as staging - version x.x

Now create instances using that image.
Right-click staging -> launch more like this
  Make sure you select the new image you created, and fill in the data for a live server

On AWS console, Route 53, {newhive.com, tnh.me} add new entry for new server (copy the format from the others, and get the DNS from EC2 Managment Console)

On your new instance,
  cd /var/www/newhive
  vim newhive/config/config.py
     change the dev prefix and make sure you can access it with a browser (navigate to <new server dns>.newhive.com)
     hive_server_deploy
     Everything worked out?
       now comment out dev prefix
       update the loadbalancer to point at the new server(s)

